print(set("IFRvIFNoZXJsb2NrIEhvbG1lcyBzaGUgaXMgYWx3YXlzIHRoZSB3b21hbi4gSSBoYXZlIHNlbGRvbSBoZWFyZCBoaW0KICAgICBtZW50aW9uIGhlciB1bmRlciBhbnkgb3RoZXIgbmFtZS4gSW4gaGlzIGV5ZXMgc2hlIGVjbGlwc2VzIGFuZAogICAgIHByZWRvbWluYXRlcyB0aGUgd2hvbGUgb2YgaGVyIHNleC4gSXQgd2FzIG5vdCB0aGF0IGhlIGZlbHQgYW55CiAgICAgZW1vdGlvbiBha2luIHRvIGxvdmUgZm9yIElyZW5lIEFkbGVyLiBBbGwgZW1vdGlvbnMsIGFuZCB0aGF0IG9uZQogICAgIHBhcnRpY3VsYXJseSwgd2VyZSBhYmhvcnJlbnQgdG8gaGlzIGNvbGQsIHByZWNpc2UgYnV0IGFkbWlyYWJseQogICAgIGJhbGFuY2VkIG1pbmQuIEhlIHdhcywgSSB0YWtlIGl0LCB0aGUgbW9zdCBwZXJmZWN0IHJlYXNvbmluZyBhbmQKICAgICBvYnNlcnZpbmcgbWFjaGluZSB0aGF0IHRoZSB3b3JsZCBoYXMgc2VlbiwgYnV0IGFzIGEgbG92ZXIgaGUgd291bGQKICAgICBoYXZlIHBsYWNlZCBoaW1zZWxmIGluIGEgZmFsc2UgcG9zaXRpb24uIEhlIG5ldmVyIHNwb2tlIG9mIHRoZSBzb2Z0ZXIKICAgICBwYXNzaW9ucywgc2F2ZSB3aXRoIGEgZ2liZSBhbmQgYSBzbmVlci4gVGhleSB3ZXJlIGFkbWlyYWJsZSB0aGluZ3MKICAgICBmb3IgdGhlIG9ic2VydmVyLS1leGNlbGxlbnQgZm9yIGRyYXdpbmcgdGhlIHZlaWwgZnJvbSBtZW4ncyBtb3RpdmVzCiAgICAgYW5kIGFjdGlvbnMuIEJ1dCBmb3IgdGhlIHRyYWluZWQgcmVhc29uZXIgdG8gYWRtaXQgc3VjaCBpbnRydXNpb25zCiAgICAgaW50byBoaXMgb3duIGRlbGljYXRlIGFuZCBmaW5lbHkgYWRqdXN0ZWQgdGVtcGVyYW1lbnQgd2FzIHRvCiAgICAgaW50cm9kdWNlIGEgZGlzdHJhY3RpbmcgZmFjdG9yIHdoaWNoIG1pZ2h0IHRocm93IGEgZG91YnQgdXBvbiBhbGwgaGlzCiAgICAgbWVudGFsIHJlc3VsdHMuIEdyaXQgaW4gYSBzZW5zaXRpdmUgaW5zdHJ1bWVudCwgb3IgYSBjcmFjayBpbiBvbmUgb2YKICAgICBoaXMgb3duIGhpZ2gtcG93ZXIgbGVuc2VzLCB3b3VsZCBub3QgYmUgbW9yZSBkaXN0dXJiaW5nIHRoYW4gYSBzdHJvbmcKICAgICBlbW90aW9uIGluIGEgbmF0dXJlIHN1Y2ggYXMgaGlzLiBBbmQgeWV0IHRoZXJlIHdhcyBidXQgb25lIHdvbWFuIHRvCiAgICAgaGltLCBhbmQgdGhhdCB3b21hbiB3YXMgdGhlIGxhdGUgSXJlbmUgQWRsZXIsIG9mIGR1YmlvdXMgYW5kCiAgICAgcXVlc3Rpb25hYmxlIG1lbW9yeS4KCiAgICAgSSBoYWQgc2VlbiBsaXR0bGUgb2YgSG9sbWVzIGxhdGVseS4gTXkgbWFycmlhZ2UgaGFkIGRyaWZ0ZWQgdXMgYXdheQogICAgIGZyb20gZWFjaCBvdGhlci4gTXkgb3duIGNvbXBsZXRlIGhhcHBpbmVzcywgYW5kIHRoZSBob21lLWNlbnRyZWQKICAgICBpbnRlcmVzdHMgd2hpY2ggcmlzZSB1cCBhcm91bmQgdGhlIG1hbiB3aG8gZmlyc3QgZmluZHMgaGltc2VsZiBtYXN0ZXIKICAgICBvZiBoaXMgb3duIGVzdGFibGlzaG1lbnQsIHdlcmUgc3VmZmljaWVudCB0byBhYnNvcmIgYWxsIG15IGF0dGVudGlvbiwKICAgICB3aGlsZSBIb2xtZXMsIHdobyBsb2F0aGVkIGV2ZXJ5IGZvcm0gb2Ygc29jaWV0eSB3aXRoIGhpcyB3aG9sZQogICAgIEJvaGVtaWFuIHNvdWwsIHJlbWFpbmVkIGluIG91ciBsb2RnaW5ncyBpbiBCYWtlciBTdHJlZXQsIGJ1cmllZCBhbW9uZwogICAgIGhpcyBvbGQgYm9va3MsIGFuZCBhbHRlcm5hdGluZyBmcm9tIHdlZWsgdG8gd2VlayBiZXR3ZWVuIGNvY2FpbmUgYW5kCiAgICAgYW1iaXRpb24sIHRoZSBkcm93c2luZXNzIG9mIHRoZSBkcnVnLCBhbmQgdGhlIGZpZXJjZSBlbmVyZ3kgb2YgaGlzCiAgICAgb3duIGtlZW4gbmF0dXJlLiBIZSB3YXMgc3RpbGwsIGFzIGV2ZXIsIGRlZXBseSBhdHRyYWN0ZWQgYnkgdGhlIHN0dWR5CiAgICAgb2YgY3JpbWUsIGFuZCBvY2N1cGllZCBoaXMgaW1tZW5zZSBmYWN1bHRpZXMgYW5kIGV4dHJhb3JkaW5hcnkgcG93ZXJzCiAgICAgb2Ygb2JzZXJ2YXRpb24gaW4gZm9sbG93aW5nIG91dCB0aG9zZSBjbHVlcywgYW5kIGNsZWFyaW5nIHVwIHRob3NlCiAgICAgbXlzdGVyaWVzIHdoaWNoIGhhZCBiZWVuIGFiYW5kb25lZCBhcyBob3BlbGVzcyBieSB0aGUgb2ZmaWNpYWwKICAgICBwb2xpY2UuIEZyb20gdGltZSB0byB0aW1lIEkgaGVhcmQgc29tZSB2YWd1ZSBhY2NvdW50IG9mIGhpcyBkb2luZ3M6CiAgICAgb2YgaGlzIHN1bW1vbnMgdG8gT2Rlc3NhIGluIHRoZSBjYXNlIG9mIHRoZSBUcmVwb2ZmIG11cmRlciwgb2YgaGlzCiAgICAgY2xlYXJpbmcgdXAgb2YgdGhlIHNpbmd1bGFyIHRyYWdlZHkgb2YgdGhlIEF0a2luc29uIGJyb3RoZXJzIGF0CiAgICAgVHJpbmNvbWFsZWUsIGFuZCBmaW5hbGx5IG9mIHRoZSBtaXNzaW9uIHdoaWNoIGhlIGhhZCBhY2NvbXBsaXNoZWQgc28KICAgICBkZWxpY2F0ZWx5IGFuZCBzdWNjZXNzZnVsbHkgZm9yIHRoZSByZWlnbmluZyBmYW1pbHkgb2YgSG9sbGFuZC4KICAgICBCZXlvbmQgdGhlc2Ugc2lnbnMgb2YgaGlzIGFjdGl2aXR5LCBob3dldmVyLCB3aGljaCBJIG1lcmVseSBzaGFyZWQKICAgICB3aXRoIGFsbCB0aGUgcmVhZGVycyBvZiB0aGUgZGFpbHkgcHJlc3MsIEkga25ldyBsaXR0bGUgb2YgbXkgZm9ybWVyCiAgICAgZnJpZW5kIGFuZCBjb21wYW5pb24uCgogICAgIE9uZSBuaWdodC0taXQgd2FzIG9uIHRoZSB0d2VudGlldGggb2YgTWFyY2gsIDE4ODgtLUkgd2FzIHJldHVybmluZwogICAgIGZyb20gYSBqb3VybmV5IHRvIGEgcGF0aWVudCAoZm9yIEkgaGFkIG5vdyByZXR1cm5lZCB0byBjaXZpbAogICAgIHByYWN0aWNlKSwgd2hlbiBteSB3YXkgbGVkIG1lIHRocm91Z2ggQmFrZXIgU3RyZWV0LiBBcyBJIHBhc3NlZCB0aGUKICAgICB3ZWxsLXJlbWVtYmVyZWQgZG9vciwgd2hpY2ggbXVzdCBhbHdheXMgYmUgYXNzb2NpYXRlZCBpbiBteSBtaW5kIHdpdGgKICAgICBteSB3b29pbmcsIGFuZCB3aXRoIHRoZSBkYXJrIGluY2lkZW50cyBvZiB0aGUgU3R1ZHkgaW4gU2NhcmxldCwgSSB3YXMKICAgICBzZWl6ZWQgd2l0aCBhIGtlZW4gZGVzaXJlIHRvIHNlZSBIb2xtZXMgYWdhaW4sIGFuZCB0byBrbm93IGhvdyBoZSB3YXMKICAgICBlbXBsb3lpbmcgaGlzIGV4dHJhb3JkaW5hcnkgcG93ZXJzLiBIaXMgcm9vbXMgd2VyZSBicmlsbGlhbnRseSBsaXQsCiAgICAgYW5kLCBldmVuIGFzIEkgbG9va2VkIHVwLCBJIHNhdyBoaXMgdGFsbCwgc3BhcmUgZmlndXJlIHBhc3MgdHdpY2UgaW4KICAgICBhIGRhcmsgc2lsaG91ZXR0ZSBhZ2FpbnN0IHRoZSBibGluZC4gSGUgd2FzIHBhY2luZyB0aGUgcm9vbSBzd2lmdGx5LAogICAgIGVhZ2VybHksIHdpdGggaGlzIGhlYWQgc3VuayB1cG9uIGhpcyBjaGVzdCBhbmQgaGlzIGhhbmRzIGNsYXNwZWQKICAgICBiZWhpbmQgaGltLiBUbyBtZSwgd2hvIGtuZXcgaGlzIGV2ZXJ5IG1vb2QgYW5kIGhhYml0LCBoaXMgYXR0aXR1ZGUKICAgICBhbmQgbWFubmVyIHRvbGQgdGhlaXIgb3duIHN0b3J5LiBIZSB3YXMgYXQgd29yayBhZ2Fpbi4gSGUgaGFkIHJpc2VuCiAgICAgb3V0IG9mIGhpcyBkcnVnLWNyZWF0ZWQgZHJlYW1zIGFuZCB3YXMgaG90IHVwb24gdGhlIHNjZW50IG9mIHNvbWUgbmV3CiAgICAgcHJvYmxlbS4gSSByYW5nIHRoZSBiZWxsIGFuZCB3YXMgc2hvd24gdXAgdG8gdGhlIGNoYW1iZXIgd2hpY2ggaGFkCiAgICAgZm9ybWVybHkgYmVlbiBpbiBwYXJ0IG15IG93bi4KCiAgICAgSGlzIG1hbm5lciB3YXMgbm90IGVmZnVzaXZlLiBJdCBzZWxkb20gd2FzOyBidXQgaGUgd2FzIGdsYWQsIEkgdGhpbmssCiAgICAgdG8gc2VlIG1lLiBXaXRoIGhhcmRseSBhIHdvcmQgc3Bva2VuLCBidXQgd2l0aCBhIGtpbmRseSBleWUsIGhlIHdhdmVkCiAgICAgbWUgdG8gYW4gYXJtY2hhaXIsIHRocmV3IGFjcm9zcyBoaXMgY2FzZSBvZiBjaWdhcnMsIGFuZCBpbmRpY2F0ZWQgYQogICAgIHNwaXJpdCBjYXNlIGFuZCBhIGdhc29nZW5lIGluIHRoZSBjb3JuZXIuIFRoZW4gaGUgc3Rvb2QgYmVmb3JlIHRoZQogICAgIGZpcmUgYW5kIGxvb2tlZCBtZSBvdmVyIGluIGhpcyBzaW5ndWxhciBpbnRyb3NwZWN0aXZlIGZhc2hpb24uCgogICAgICJXZWRsb2NrIHN1aXRzIHlvdSwiIGhlIHJlbWFya2VkLiAiSSB0aGluaywgV2F0c29uLCB0aGF0IHlvdSBoYXZlIHB1dAogICAgIG9uIHNldmVuIGFuZCBhIGhhbGYgcG91bmRzIHNpbmNlIEkgc2F3IHlvdS4iCgogICAgICJTZXZlbiEiIEkgYW5zd2VyZWQuCgogICAgICJJbmRlZWQsIEkgc2hvdWxkIGhhdmUgdGhvdWdodCBhIGxpdHRsZSBtb3JlLiBKdXN0IGEgdHJpZmxlIG1vcmUsIEkKICAgICBmYW5jeSwgV2F0c29uLiBBbmQgaW4gcHJhY3RpY2UgYWdhaW4sIEkgb2JzZXJ2ZS4gWW91IGRpZCBub3QgdGVsbCBtZQogICAgIHRoYXQgeW91IGludGVuZGVkIHRvIGdvIGludG8gaGFybmVzcy4iCgogICAgICJUaGVuLCBob3cgZG8geW91IGtub3c/IgoKICAgICAiSSBzZWUgaXQsIEkgZGVkdWNlIGl0LiBIb3cgZG8gSSBrbm93IHRoYXQgeW91IGhhdmUgYmVlbiBnZXR0aW5nCiAgICAgeW91cnNlbGYgdmVyeSB3ZXQgbGF0ZWx5LCBhbmQgdGhhdCB5b3UgaGF2ZSBhIG1vc3QgY2x1bXN5IGFuZAogICAgIGNhcmVsZXNzIHNlcnZhbnQgZ2lybD8iCgogICAgICJNeSBkZWFyIEhvbG1lcywiIHNhaWQgSSwgInRoaXMgaXMgdG9vIG11Y2guIFlvdSB3b3VsZCBjZXJ0YWlubHkgaGF2ZQogICAgIGJlZW4gYnVybmVkLCBoYWQgeW91IGxpdmVkIGEgZmV3IGNlbnR1cmllcyBhZ28uIEl0IGlzIHRydWUgdGhhdCBJIGhhZAogICAgIGEgY291bnRyeSB3YWxrIG9uIFRodXJzZGF5IGFuZCBjYW1lIGhvbWUgaW4gYSBkcmVhZGZ1bCBtZXNzLCBidXQgYXMgSQogICAgIGhhdmUgY2hhbmdlZCBteSBjbG90aGVzIEkgY2FuJ3QgaW1hZ2luZSBob3cgeW91IGRlZHVjZSBpdC4gQXMgdG8gTWFyeQogICAgIEphbmUsIHNoZSBpcyBpbmNvcnJpZ2libGUsIGFuZCBteSB3aWZlIGhhcyBnaXZlbiBoZXIgbm90aWNlLCBidXQKICAgICB0aGVyZSwgYWdhaW4sIEkgZmFpbCB0byBzZWUgaG93IHlvdSB3b3JrIGl0IG91dC4iCgogICAgIEhlIGNodWNrbGVkIHRvIGhpbXNlbGYgYW5kIHJ1YmJlZCBoaXMgbG9uZywgbmVydm91cyBoYW5kcyB0b2dldGhlci4KCiAgICAgIkl0IGlzIHNpbXBsaWNpdHkgaXRzZWxmLCIgc2FpZCBoZTsgIm15IGV5ZXMgdGVsbCBtZSB0aGF0IG9uIHRoZQogICAgIGluc2lkZSBvZiB5b3VyIGxlZnQgc2hvZSwganVzdCB3aGVyZSB0aGUgZmlyZWxpZ2h0IHN0cmlrZXMgaXQsIHRoZQogICAgIGxlYXRoZXIgaXMgc2NvcmVkIGJ5IHNpeCBhbG1vc3QgcGFyYWxsZWwgY3V0cy4gT2J2aW91c2x5IHRoZXkgaGF2ZQogICAgIGJlZW4gY2F1c2VkIGJ5IHNvbWVvbmUgd2hvIGhhcyB2ZXJ5IGNhcmVsZXNzbHkgc2NyYXBlZCByb3VuZCB0aGUKICAgICBlZGdlcyBvZiB0aGUgc29sZSBpbiBvcmRlciB0byByZW1vdmUgY3J1c3RlZCBtdWQgZnJvbSBpdC4gSGVuY2UsIHlvdQogICAgIHNlZSwgbXkgZG91YmxlIGRlZHVjdGlvbiB0aGF0IHlvdSBoYWQgYmVlbiBvdXQgaW4gdmlsZSB3ZWF0aGVyLCBhbmQKICAgICB0aGF0IHlvdSBoYWQgYSBwYXJ0aWN1bGFybHkgbWFsaWduYW50IGJvb3Qtc2xpdHRpbmcgc3BlY2ltZW4gb2YgdGhlCiAgICAgTG9uZG9uIHNsYXZleS4gQXMgdG8geW91ciBwcmFjdGljZSwgaWYgYSBnZW50bGVtYW4gd2Fsa3MgaW50byBteQogICAgIHJvb21zIHNtZWxsaW5nIG9mIGlvZG9mb3JtLCB3aXRoIGEgYmxhY2sgbWFyayBvZiBuaXRyYXRlIG9mIHNpbHZlcgogICAgIHVwb24gaGlzIHJpZ2h0IGZvcmVmaW5nZXIsIGFuZCBhIGJ1bGdlIG9uIHRoZSByaWdodCBzaWRlIG9mIGhpcwogICAgIHRvcC1oYXQgdG8gc2hvdyB3aGVyZSBoZSBoYXMgc2VjcmV0ZWQgaGlzIHN0ZXRob3Njb3BlLCBJIG11c3QgYmUKICAgICBkdWxsLCBpbmRlZWQsIGlmIEkgZG8gbm90IHByb25vdW5jZSBoaW0gdG8gYmUgYW4gYWN0aXZlIG1lbWJlciBvZiB0aGUKICAgICBtZWRpY2FsIHByb2Zlc3Npb24uIg=="))
